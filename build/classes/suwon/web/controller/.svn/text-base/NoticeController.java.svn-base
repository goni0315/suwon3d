package suwon.web.controller;

import java.io.File;
import java.util.ArrayList;
import java.io.PrintWriter;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Controller;

import org.springframework.web.bind.ServletRequestUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.mymgr.framework.controller.ResponseUtil;

import suwon.web.vo.NoticeVo;
import suwon.web.Service.NoticeService;
import util.MyUtil;
import util.DownloadView;

@Controller
public class NoticeController {
	private ApplicationContext context = new ClassPathXmlApplicationContext("/config/applicationContext.xml");
	private NoticeService noticeService = (NoticeService) context.getBean("noticeService");
	
	
	//페이징 관련 클래스 호출
	MyUtil myUtil = new MyUtil();
	
	private int pageValue = 0;			//페이지 전환용 변수갑 초기화
	
	private int currentPage = 1;		//현재페이지 초기화
	private int record = 0;				//전체 공지글 수
	private int numPerPage = 5; 		//한 페이지당 뿌려지는 전체 공지글의 수
	private int impPerPage = 3;			//한 페이지당 뿌려지는 긴급공지의 수
	private int totalPage = 0;			//전체 페이지 수
	private int viewPage = 0;			//보여줄 페이지
	private long limitSize = 10*1024*1024; //업로프 파일크기 제한 10mb
	
	Map<String, String> searchMap = new HashMap<String, String>();	 	//검색 맵 (검색하는 타입/검색어)
	Map prevMap = new HashMap();
	Map nextMap = new HashMap();
	
	
	////////공지 리스트  액션 ////////// 
	@RequestMapping("/noticeList.do")
	public ModelAndView noticeListAction( 
			HttpServletRequest request, 
			HttpServletResponse response)throws Exception{

		String pageNum  = request.getParameter("pageNum"); //페이지
		
		record = Integer.parseInt(noticeService.recordNotice()); //전체 공지글 수
		totalPage = myUtil.getPageCount(numPerPage, record); //전체페이지수
		
		//페이지 캐스팅
		if(pageNum != null && !(pageNum.equals(""))){
		    	currentPage = Integer.parseInt(pageNum);
		    }else{
		    	currentPage = 1;
		}
	
		////첫페이지 및 마지막 페이지 오류
		if(currentPage == 1){
			viewPage = 0;
			pageNum = "1";
		}
		else if(currentPage > totalPage){
			viewPage = (totalPage - 1) * numPerPage;
			pageNum = String.valueOf(totalPage);
		}
		else
			viewPage = (currentPage -1) * numPerPage;

		//페이지 URL
		String urlView = "noticeList.do";
		
		List<NoticeVo> noticeList = noticeService.getNoticeList(viewPage, numPerPage);	//쿼리실행
		List<NoticeVo> impNoticeList = noticeService.getNoticeImp("상", impPerPage);	//쿼리실행  상:공지 중:중요 하:기본
		
		
		ModelAndView mav = new ModelAndView("/jsp/admin/noticeList");	//view파일 지정
		
		//공지사항 리스트 추가
		mav.addObject("noticeList", noticeList);  		//전체리스트
		mav.addObject("impNoticeList", impNoticeList);	//긴급공지 리스트
		
		//페이징 오브젝트 추가
		mav.addObject("pageIndexList", myUtil.pageIndexList(currentPage, totalPage, urlView));	//전체페이징
		mav.addObject("pageNum", pageNum);			//페이지넘버
		mav.addObject("numPerPage", numPerPage);	//한페이지 당 글의 수
		mav.addObject("totalPage", totalPage); 		//전체페이지
		mav.addObject("noticeRecord", record);		//전체글의 수
		
		return mav;
	}
	
	///////////공지 조회시 카운트/////////
	@RequestMapping("/noticeCount.do")
	public ModelAndView noticeCountAction(int bod_seq, 
			HttpServletRequest request, 
			HttpServletResponse response)throws Exception{
		
		NoticeVo noticeArticle = noticeService.getNotice(bod_seq);
		String regip = request.getRemoteAddr();
		
		//작성자 아이피 검사
		if(!regip.equals(noticeArticle.getReg_ip())){
			int count = noticeArticle.getBod_cnt();
			noticeArticle.setBod_cnt(++count);
			noticeService.updateCountNotice(noticeArticle);
		}
		return new ModelAndView("redirect:noticeContent.do", "bod_seq", bod_seq);
	}
	
	/////// 공지글 페이지 전환 액션 //////////
	@RequestMapping("/noticeContent.do")
	public ModelAndView noticeContentAction(int bod_seq, 
			HttpServletRequest request)throws Exception{
		
	
		prevMap.put("moveType", "1");
		prevMap.put("bod_seq", bod_seq);
		
		nextMap.put("moveType", "2");
		nextMap.put("bod_seq", bod_seq);
		
		NoticeVo noticeContent = noticeService.getNotice(bod_seq);
		NoticeVo prevContent = noticeService.getNoticeMove(prevMap);
		NoticeVo nextContent = noticeService.getNoticeMove(nextMap);
		
		ModelAndView mav = new ModelAndView("/jsp/admin/noticeContent");	//view파일 지정
		mav.addObject("noticeContent", noticeContent);				//object 추가
		mav.addObject("prevContent", prevContent);
		mav.addObject("nextContent", nextContent);
		mav.addObject("pageNum", currentPage);	
	
		return mav;
	}
	
	/////// 글쓰기 입력폼 페이지 전환  액션 ///////
	@RequestMapping("/noticeWrite.do")
	public ModelAndView noticeWriteAction()throws Exception{
		ModelAndView mav = new ModelAndView("/jsp/admin/noticeWrite"); //view파일 지정
		mav.addObject("pageNum", currentPage);	
		return mav; 		
		
	}
	
	/////// 글 등록 후 redirect  액션 ///////
	@SuppressWarnings("deprecation")
	@RequestMapping("/noticeInsert.do")
	public ModelAndView noticeInsertAction(NoticeVo noticeArticle,
			HttpServletRequest request, 
			HttpServletResponse response)throws Exception{
		
		request.setCharacterEncoding("UTF-8"); //인코딩 변환
		
		//첨부파일 받아오기
		MultipartFile file1 = noticeArticle.getFile1();
		MultipartFile file2 = noticeArticle.getFile2();
		
		long file1size = file1.getSize();
		long file2size = file2.getSize();	

		if(file1size > limitSize ||file2size > limitSize){//파일 크기 계산
			pageValue = 6; 		//작성후 redirect 요청번호
			ModelAndView mav = new ModelAndView("/jsp/admin/noticeRedirect");	//view파일 지정
			mav.addObject("pageValue", pageValue);								//페이지요청 object 추가
			return mav;
		}else{
			if(!file1.isEmpty()){
				String filename1 = file1.getOriginalFilename();
				File tempfile = new File(request.getRealPath("/upload"), file1.getOriginalFilename());
				if(tempfile.exists() && tempfile.isFile()){//중복파일 처리
					filename1 = System.currentTimeMillis() + "_"+file1.getOriginalFilename();
					tempfile = new File(request.getRealPath("/upload"), filename1);	
				}
				
				file1.transferTo(tempfile);
				noticeArticle.setBod_filename1(filename1);
			}
			if(!file2.isEmpty()){ //2nd첨부파일 존재시 파일 업로드
				String filename2 = file2.getOriginalFilename();
				File tempfile = new File(request.getRealPath("/upload"), file2.getOriginalFilename());
				if(tempfile.exists() && tempfile.isFile()){//중복파일 처리
					filename2 = System.currentTimeMillis() + "_"+file2.getOriginalFilename();
					tempfile = new File(request.getRealPath("/upload"), filename2);			
				}
				file2.transferTo(tempfile);
				noticeArticle.setBod_filename2(filename2);
			}
		}
		noticeArticle.setReg_ip(request.getRemoteAddr()); //아이피 셋팅
		noticeService.insertNotice(noticeArticle);	//쿼리 실행
		pageValue = 1; 		//작성후 redirect 요청번호
		ModelAndView mav = new ModelAndView("/jsp/admin/noticeRedirect");	//view파일 지정
		mav.addObject("pageValue", pageValue);								//페이지요청 object 추가

		return mav;
	}
	
	/////// 공지글 삭제 후 redirect 액션 /////////
	@SuppressWarnings("deprecation")
	@RequestMapping("/noticeDelete.do")
	public ModelAndView noticeDeleteAction(int bod_seq, 
			HttpServletRequest request, 
			HttpServletResponse response)throws Exception{

		pageValue = 2; 							//삭제후 redirect 요청번호

		//파일 삭제
		try{
			NoticeVo tmpNotice = noticeService.getNotice(bod_seq);
			
			String filename1 = tmpNotice.getBod_filename1();
			String filename2 = tmpNotice.getBod_filename2();
			
			String uploadFileName1 = request.getRealPath("/upload")+"/"+filename1;
			String uploadFileName2 = request.getRealPath("/upload")+"/"+filename2;
			
			File uploadfile1 =  new File(uploadFileName1);			
			File uploadfile2 =  new File(uploadFileName2);
	
			if(uploadfile1.exists() && uploadfile1.isFile()){
				uploadfile1.delete();
			}
			if(uploadfile2.exists() && uploadfile2.isFile()){
				uploadfile2.delete();
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		noticeService.deleteNotice(bod_seq);	//실행쿼리
			
		ModelAndView mav = new ModelAndView("/jsp/admin/noticeRedirect");	//view파일 지정
		mav.addObject("pageValue", pageValue);								//object 추가
		mav.addObject("pageNum", currentPage);
		
		return mav;	
	}
	
	//////////글수정 페이지 전환  액션 /////////
	@RequestMapping("/noticeUpdate.do")
	public ModelAndView noticeUpdateAction(Integer bod_seq)throws Exception{
		
		NoticeVo noticeArticle = noticeService.getNotice(bod_seq);			//쿼리 실행
		ModelAndView mav = new ModelAndView("/jsp/admin/noticeUpdate");		//view파일 지정
		mav.addObject("noticeArticle", noticeArticle);						//object 추가
	
		return mav;		
	}

	///////////// 글수정후 redirect  액션 ////////////////
	@SuppressWarnings("deprecation")
	@RequestMapping("/noticeModify.do")
	public ModelAndView noticeModifyAction(NoticeVo noticeArticle, 
			HttpServletRequest request, 
			HttpServletResponse response)throws Exception{
		
		request.setCharacterEncoding("UTF-8");	//인코딩 변환		
		pageValue = 3; 							//수정 후 redirect 요청번호
		
		MultipartFile file1 = noticeArticle.getFile1();
		MultipartFile file2 = noticeArticle.getFile2();
		
		long file1size = file1.getSize();
		long file2size = file2.getSize();
		//파일 업데이트 경우 ( 기존 파일 삭제후 업데이트) 나중에 클래스화
		if(file1size > limitSize || file2size > limitSize){ //용량 초과일경우
			pageValue = 8; 		//작성후 redirect 요청번호
			//* 한글이 깨짐(직접처리 한글깨짐)
			ModelAndView mav = new ModelAndView("/jsp/admin/noticeUpdate");	//view파일 지정
			mav.addObject("noticeArticle", noticeArticle);
			
			response.setCharacterEncoding("UTF-8");	//인코딩 변환
			response.setContentType("text/html; charset=UTF-8");
			
		    PrintWriter writer = response.getWriter();
		    writer.println("<script type='text/javascript'>");
		    writer.println("alert('업로드 파일 제한은 10mb 입니다');");
		    writer.println("</script>");
		    writer.flush();
	
			return mav;
		}else{
			if(!file1.isEmpty()){ //첫번째 파일 업데이트 경우
				//삭제
				NoticeVo tmpNotice = noticeService.getNotice(noticeArticle.getBod_seq());
				String delFilename = tmpNotice.getBod_filename1();
				String uploadFileName = request.getRealPath("/upload")+"/"+delFilename;
				File uploadfile =  new File(uploadFileName);
				if(uploadfile.exists() && uploadfile.isFile()){
					uploadfile.delete();
				}
				String filename = file1.getOriginalFilename();
				File tempfile = new File(request.getRealPath("/upload"), file1.getOriginalFilename());			
	
				if(tempfile.exists() && tempfile.isFile()){//중복파일 처리
					filename = System.currentTimeMillis() + "_"+file1.getOriginalFilename();
					tempfile = new File(request.getRealPath("/upload"), filename);			
				}
				file1.transferTo(tempfile);  //업로드
				noticeArticle.setBod_filename1(filename);
			}
			if(!file2.isEmpty()){ //두번째 파일 업데이트 경우
				//삭제
				NoticeVo tmpNotice = noticeService.getNotice(noticeArticle.getBod_seq());
				String delFilename = tmpNotice.getBod_filename2();
				String uploadFileName = request.getRealPath("/upload")+"/"+delFilename;
				File uploadfile =  new File(uploadFileName);
				if(uploadfile.exists() && uploadfile.isFile()){
					uploadfile.delete();
				}
				String filename = file2.getOriginalFilename();
				File tempfile = new File(request.getRealPath("/upload"), file2.getOriginalFilename());
	
				if(tempfile.exists() && tempfile.isFile()){//중복파일 처리
					filename = System.currentTimeMillis() + "_"+file2.getOriginalFilename();
					tempfile = new File(request.getRealPath("/upload"), filename);			
				}
	
				file2.transferTo(tempfile);  //업로드
				noticeArticle.setBod_filename2(filename);
			}
		}
	
		noticeService.updateNotice(noticeArticle);			//쿼리실행
		
		ModelAndView mav = new ModelAndView("/jsp/admin/noticeRedirect");		//view파일 지정
		mav.addObject("pageValue", pageValue);
		mav.addObject("pageNum", currentPage);	//페이지넘버
				
		return mav;
	}	
	/////// 공지글 파일삭제 후 redirect 액션 /////////
	@SuppressWarnings("deprecation")
	@RequestMapping("/noticeFileDelete.do")
	public ModelAndView noticeFileDeleteAction(int bod_seq, 
			HttpServletRequest request, 
			HttpServletResponse response)throws Exception{
		
		int type = Integer.parseInt(request.getParameter("type"));
		NoticeVo noticeArticle = noticeService.getNotice(bod_seq); 	//파일 삭제할 글 가져오기
		try{			
			String filename = null;
			if(type == 1){
				filename = noticeArticle.getBod_filename1();
			}else if(type == 2){
				filename = noticeArticle.getBod_filename2();
			}
			//파일 삭제
			String uploadFileName = request.getRealPath("/upload")+"/"+filename;
			File uploadfile =  new File(uploadFileName);			
			if(uploadfile.exists() && uploadfile.isFile()){
				uploadfile.delete();
			}
			//파일 이름 초기화
			if(type == 1){
				noticeArticle.setBod_filename1("");
			}else if(type == 2){
				noticeArticle.setBod_filename2("");
			}
			
		}catch(Exception e){
			e.printStackTrace();
		}
				
		ModelAndView mav = new ModelAndView("/jsp/admin/noticeUpdate");		//view파일 지정
		mav.addObject("noticeArticle", noticeArticle);						//object 추가
		mav.addObject("pageNum", currentPage);
			
		return mav;	
	}
	
	//////////// 공지글 검색//////////////
	@RequestMapping("/noticeSearch.do")
	public ModelAndView noticeSearchAction(
			HttpServletRequest request,
			HttpServletResponse response)throws Exception{

		String pageNum  = request.getParameter("pageNum");
		String searchItem = request.getParameter("item");
		String searchType = request.getParameter("type");
				
		//한글 깨짐 현상 수정
		//searchItem = new String(searchItem.getBytes("ISO-8859-1"),"UTF-8");  
		
		//맵 등록
		searchMap.put("searchType", searchType);
		searchMap.put("searchItem", searchItem);		
		
		//페이지 캐스팅
		if(pageNum != null && !(pageNum.equals(""))){
		    	currentPage = Integer.parseInt(pageNum);
		    }else{
		    	currentPage = 1;
		}

		////첫페이지 및 마지막 페이지 오류
		if(currentPage == 1){ //첫페이지 
			viewPage = 0;
			pageNum = "1";
		}
		else if(currentPage > totalPage){  //페이징 마지막 처리 전체 페이지보다 현재페이지를 높을때 전체페이지로 등록
			viewPage = (totalPage - 1) * numPerPage;
			pageNum = String.valueOf(totalPage);
		}
		else	//나머지 페이지
			viewPage = (currentPage -1) * numPerPage;
		
		record = Integer.parseInt(noticeService.recordSearchNotice(searchMap)); //전체 공지글 수
		totalPage = myUtil.getPageCount(numPerPage, record); //전체페이지수
		
		//리스트 가져오기
		List<NoticeVo> searchNotice = noticeService.getSearchNotice(searchMap, viewPage, numPerPage);
		
		//검색결과가 없을시
		if(searchNotice.isEmpty()){
			pageValue = 4; //페이지 리턴
			ModelAndView mav = new ModelAndView("/jsp/admin/noticeRedirect");		//view파일 지정
			mav.addObject("pageValue", pageValue);
			return mav;
		}else{		
			//페이지 URL
			String urlView = "noticeSearch.do?item="+searchItem+"&type="+searchType;
			
			List<NoticeVo> impNoticeList = noticeService.getNoticeImp("상", impPerPage);	//쿼리실행 상:긴급 중:중요 하:기본
				
			ModelAndView mav = new ModelAndView("/jsp/admin/noticeSearchList");	//view파일 지정
						
			//공지사항 리스트 추가
			mav.addObject("impNoticeList", impNoticeList);	//긴급공지 리스트
			mav.addObject("searchNotice", searchNotice); //검색리스트
				
			//페이징 오브젝트 추가
			mav.addObject("pageIndexList", myUtil.pageIndexList(currentPage, totalPage, urlView));	//전체페이징
			mav.addObject("pageNum", pageNum);			//페이지넘버
			mav.addObject("numPerPage", numPerPage);	//한페이지 당 글의 수
			mav.addObject("totalPage", totalPage); 		//전체페이지
			mav.addObject("noticeRecord", record);		//전체글의 수
								
			return mav;
		}
	}
	
	///////////검색공지 조회시 카운트/////////
	@RequestMapping("/noticeSearchCount.do")
	public ModelAndView noticeSearchCountAction(int bod_seq, 
			HttpServletRequest request, 
			HttpServletResponse response)throws Exception{
		
		NoticeVo noticeArticle = noticeService.getNotice(bod_seq);
		String regip = request.getRemoteAddr();
	
		//작성자 아이피 검사
		if(!regip.equals(noticeArticle.getReg_ip())){
			int count = noticeArticle.getBod_cnt();
			noticeArticle.setBod_cnt(++count);
			noticeService.updateCountNotice(noticeArticle);
		}
		return new ModelAndView("redirect:noticeSearchContent.do", "bod_seq", bod_seq);
	}
	
	/////// 검색공지글 페이지 전환 액션 //////////
	@RequestMapping("/noticeSearchContent.do")
	public ModelAndView noticeSearchContentAction( 
			HttpServletRequest request)throws Exception{
		
		record = Integer.parseInt(noticeService.recordSearchNotice(searchMap)); //전체 검색글 수
		int bod_seq =  Integer.parseInt(request.getParameter("bod_seq"));
		
		//리스트 가져오기
		List<NoticeVo> searchNotice = noticeService.getSearchNotice(searchMap);
		
		int Page = 0;
		int prevPage = 0;
		int nextPage = 0;
		
		NoticeVo searchContent=null;
		NoticeVo prevContent=null;
		NoticeVo nextContent=null;
		if(record == 1){
			Page = searchNotice.get(0).getBod_seq();
			searchContent = noticeService.getNotice(Page);
		}else{
			for(int i = 0 ; i < record; i++){
				if(bod_seq == searchNotice.get(i).getBod_seq()){
					Page = searchNotice.get(i).getBod_seq();
					searchContent = noticeService.getNotice(Page);
					if(Page != 0 && i == 0){
						prevPage = searchNotice.get(i+1).getBod_seq();
						prevContent = noticeService.getNotice(prevPage);
					}else if(Page != 0 && i == (record-1)){
						nextPage = searchNotice.get(i-1).getBod_seq();
						nextContent = noticeService.getNotice(nextPage);
					}else{
						prevPage = searchNotice.get(i+1).getBod_seq();
						nextPage = searchNotice.get(i-1).getBod_seq();
										
						prevContent = noticeService.getNotice(prevPage);
						nextContent = noticeService.getNotice(nextPage);
					}
				}		
			}
		}
		ModelAndView mav = new ModelAndView("/jsp/admin/noticeSearchContent");	//view파일 지정
		
		mav.addObject("noticeContent", searchContent);				//object 추가
		mav.addObject("prevContent", prevContent);				
		mav.addObject("nextContent", nextContent);
		mav.addObject("pageNum", currentPage);	//페이지넘버
		return mav;
	}

	//////////첨부파일 다운로드 //////////////
	@SuppressWarnings("deprecation")
	@RequestMapping("/noticeDownload.do")
	public ModelAndView notice1stDownloadAction(int bod_seq,
			HttpServletRequest request,
			HttpServletResponse response)throws Exception{
		request.setCharacterEncoding("utf-8");
		int type = Integer.parseInt(request.getParameter("type"));
		NoticeVo noticeArticle = noticeService.getNotice(bod_seq);
		String filename= null;
		if(type == 1){
			filename = noticeArticle.getBod_filename1();
		}else{
			filename = noticeArticle.getBod_filename2();
		}
		
		String uploadFileName = request.getRealPath("/upload")+"/"+filename;
	//	System.out.println("다운받을 파일 : "+ filename);
		File downFile = new File(uploadFileName);
		
		if(downFile.exists() && downFile.isFile()){
			return new ModelAndView(new DownloadView(),"file",downFile);	
		}else{ //파일이 없을시
			pageValue = 7;
			ModelAndView mav = new ModelAndView("/jsp/admin/noticeRedirect");		//view파일 지정
			mav.addObject("pageValue", pageValue);
			mav.addObject("pageNum", bod_seq);
			return mav;
		}
					
	}
	@RequestMapping("/countPopup.do")
	public String countPopup(HttpServletRequest request, HttpServletResponse response){
		List list = new ArrayList();
		list = noticeService.countPopup();
		
		return ResponseUtil.responseJSON(response, list);
	}
	@RequestMapping("/openPopup.do")
	public ModelAndView openPopup(HttpServletRequest request, HttpServletResponse response){
		ModelAndView mav = null;
		String bod_seq = ServletRequestUtils.getStringParameter(request, "bod_seq","");
		NoticeVo list = noticeService.getPopupInfo(bod_seq); 
		mav = new ModelAndView();
		mav.addObject("resultVo", list);
		mav.setViewName("/jsp/pop/initPopup");
		return mav;
	}
	////////공지 리스트  액션 ////////// 
	@RequestMapping("/popNoticeList.do")
	public ModelAndView popNoticeList( 
		HttpServletRequest request, 
		HttpServletResponse response)throws Exception{
	
		String pageNum  = request.getParameter("pageNum"); //페이지
		
		record = Integer.parseInt(noticeService.recordNotice()); //전체 공지글 수
		totalPage = myUtil.getPageCount(numPerPage, record); //전체페이지수
		
		//페이지 캐스팅
		if(pageNum != null && !(pageNum.equals(""))){
		    	currentPage = Integer.parseInt(pageNum);
		    }else{
		    	currentPage = 1;
		}
	
		////첫페이지 및 마지막 페이지 오류
		if(currentPage == 1){
			viewPage = 0;
			pageNum = "1";
		}
		else if(currentPage > totalPage){
			viewPage = (totalPage - 1) * numPerPage;
			pageNum = String.valueOf(totalPage);
		}
		else
			viewPage = (currentPage -1) * numPerPage;
	
		//페이지 URL
		String urlView = "popNoticeList.do";
		
		List<NoticeVo> noticeList = noticeService.getNoticeList(viewPage, numPerPage);	//쿼리실행
		List<NoticeVo> impNoticeList = noticeService.getNoticeImp("상", impPerPage);	//쿼리실행  상:공지 중:중요 하:기본
		
		
		ModelAndView mav = new ModelAndView("/jsp/admin/popNoticeList");	//view파일 지정
		
		//공지사항 리스트 추가
		mav.addObject("noticeList", noticeList);  		//전체리스트
		mav.addObject("impNoticeList", impNoticeList);	//긴급공지 리스트
		
		//페이징 오브젝트 추가
		mav.addObject("pageIndexList", myUtil.pageIndexList(currentPage, totalPage, urlView));	//전체페이징
		mav.addObject("pageNum", pageNum);			//페이지넘버
		mav.addObject("numPerPage", numPerPage);	//한페이지 당 글의 수
		mav.addObject("totalPage", totalPage); 		//전체페이지
		mav.addObject("noticeRecord", record);		//전체글의 수
		
		return mav;
	}
	///////////공지 조회시 카운트/////////
	@RequestMapping("/popNoticeCount.do")
	public ModelAndView popNoticeCount(int bod_seq, 
			HttpServletRequest request, 
			HttpServletResponse response)throws Exception{
		
		NoticeVo noticeArticle = noticeService.getNotice(bod_seq);
		String regip = request.getRemoteAddr();
		
		//작성자 아이피 검사
		if(!regip.equals(noticeArticle.getReg_ip())){
			int count = noticeArticle.getBod_cnt();
			noticeArticle.setBod_cnt(++count);
			noticeService.updateCountNotice(noticeArticle);
		}
		return new ModelAndView("redirect:popNoticeContent.do", "bod_seq", bod_seq);
	}
	
	/////// 공지글 페이지 전환 액션 //////////
	@RequestMapping("/popNoticeContent.do")
	public ModelAndView popNoticeContentAction(int bod_seq, 
			HttpServletRequest request)throws Exception{
		
		prevMap.put("moveType", "1");
		prevMap.put("bod_seq", bod_seq);
		
		nextMap.put("moveType", "2");
		nextMap.put("bod_seq", bod_seq);
		
		NoticeVo noticeContent = noticeService.getNotice(bod_seq);
		NoticeVo prevContent = noticeService.getNoticeMove(prevMap);
		NoticeVo nextContent = noticeService.getNoticeMove(nextMap);
		
		ModelAndView mav = new ModelAndView("/jsp/admin/popNoticeContent");	//view파일 지정
		mav.addObject("noticeContent", noticeContent);				//object 추가
		mav.addObject("prevContent", prevContent);
		mav.addObject("nextContent", nextContent);
		mav.addObject("pageNum", currentPage);	//페이지넘버
		
		return mav;
	}
}
